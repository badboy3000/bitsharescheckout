/*! bitsharescheckout - v1.0.0-SNAPSHOT - 2015-03-31
 * https://github.com/sidhujag/bitsharescheckout
 * Copyright (c) 2015 Jag Sidhu;
 * Licensed 
 */
    function ajaxLookup(serializedData)
    {
        $.ajax({
            url: "callbacks/callback_lookup.php",
            type: 'post',
            dataType: 'json',
            timeout: 15000,
            data: serializedData,
            beforeSend:function(){ 
            },
            complete:function(){
                globalInitDialog.close();
                $("#payNow").focus();
            },   
            error:function(jqXHR, textStatus, errorThrown){
                var res = textStatus;
                if(jqXHR.responseText !== "")
                {
                    res = jqXHR.responseText;
                }
                var n = noty({
                    text: res,
                    type: 'error'
                });
                btsUpdateUIPaymentFail();                 
            },                              
            success: function(response, textStatus, jqXHR) {
                if(response)
                {
                    if(response.error)
                    {
                       var n = noty({
                            text: response.error,
                            type: 'error'
                        });
                        btsUpdateUIPaymentFail();                                             
                    }
                    else 
                    {
                        if(response.countdown_time)
                        {
                            var countdownTime = parseInt( response.countdown_time, 0);
                            if(countdownTime > 0)
                            {
                                btsStartPaymentCountdown(countdownTime);
                            }
                            else
                            {
                                btsCancelPaymentByCountdown();
                            }
                        }                   
                        if(response.primaryTickerAssets && response.secondaryTickerAssets)
                        {
                            btsStartTicker(response.primaryTickerAssets, response.secondaryTickerAssets);
                        }                                          
                                             
                        if(globalTotal === 0 && globalAsset === "")
                        {
                            globalTotal = response.total;
                            globalAsset = response.asset;
                            $('#amount').val(globalTotal + " " + globalAsset);
                        }                          
                    }
			    }
			    else
			    {
                    btsUpdateUIPaymentFail(); 
			    }
			                                                
            }
        });    
    }
    function ajaxPay(serializedData)
    {
        
        $.ajax({
            url: "callbacks/callback_pay.php",
            type: 'post',
            dataType: 'json',
            timeout: 15000,
            data: serializedData,
            beforeSend:function(){ 
                globalLoadingDialog.open();
               
            },
            complete:function(){
                globalLoadingDialog.close();
            },   
            error:function(jqXHR, textStatus, errorThrown){
                var res = textStatus;
                if(jqXHR.responseText !== "")
                {
                    res = jqXHR.responseText;
                }
                var n = noty({
                    text: res,
                    type: 'error'
                });
                btsUpdateUIPaymentFail();                 
            },                              
            success: function(response, textStatus, jqXHR) {
                var textresponse = "Payment processing...";

                if(response)
                {
                    if(response.error)
                    {
                       noty({
                            text: response.error,
                            type: 'error'
                        });
                        btsUpdateUIPaymentFail();                                             
                    }
                    else if(response.url)
                    {
                        noty({
                            text: textresponse,
                            type: 'success'
                        });
                        if(response.url.length > 1)
                        {
                            window.location.href =  response.url;
                        }
			            btsStartPaymentTracker(serializedData);
			            btsShowPaymentStatus();                                  
                    }

			    }
			    else
			    {
                    btsUpdateUIPaymentFail(); 
			    }
			                                                
            }
        });    
    }
    function ajaxCancel(myurl, serializedData)
    {      
        $.ajax({
            url: myurl,
            type: 'post',
            dataType: 'json',
            timeout: 15000,
            data: serializedData,
            beforeSend:function(){
                globalLoadingDialog.open();
            },
            complete:function(){
                globalLoadingDialog.close();
            },   
            error:function(jqXHR, textStatus, errorThrown){
                var res = textStatus;
                if(jqXHR.responseText !== "")
                {
                    res = jqXHR.responseText;
                }
                var n = noty({
                    text: res,
                    type: 'error'
                });

		        btsUpdateUIReturnError();                                 
            },                              
            success: function(response, textStatus, jqXHR) {
               if(response)
               { 
                   if(response.fallbackURL)
                   { 
                       var textresponse = "Returning to checkout...If you are not redirected click <a href='"+response.fallbackURL+"'>here</a>";
                       var n = noty({
                            text: textresponse,
                            type: 'success',
                            timeout: false
                        });
                    }               
                    if(response.error)
                    {
                       noty({
                            text: response.error,
                            type: 'error'
                        });                                           
                    }
                    else if(response.url)
                    {                                  

                       window.location.href =  response.url;                 
                        
                    }
                                                      
                }
                                                  
            }
        });     
    }
    function ajaxSuccess(myurl, serializedData)
    {      
        $.ajax({
            url: myurl,
            type: 'post',
            timeout: 15000,
            dataType: 'json',
            data: serializedData,
            beforeSend:function(){
                globalLoadingDialog.open();
            },
            complete:function(){
                globalLoadingDialog.close();
            },   
            error:function(jqXHR, textStatus, errorThrown){
                var res = textStatus;
                if(jqXHR.responseText !== "")
                {
                    res = jqXHR.responseText;
                }
                var n = noty({
                    text: res,
                    type: 'error'
                });

		        btsUpdateUIReturnError();                                 
            },                              
            success: function(response, textStatus, jqXHR) {
               if(response)
               { 
                   if(response.fallbackURL)
                   { 
                       var textresponse = "Returning to checkout...If you are not redirected click <a href='"+response.fallbackURL+"'>here</a>";
                       var n = noty({
                            text: textresponse,
                            type: 'success',
                            timeout: false
                        });
                    }               
                    if(response.error)
                    {
                       noty({
                            text: response.error,
                            type: 'error'
                        });                                           
                    }
                    else if(response.url)
                    {                                  

                       window.location.href =  response.url;                 
                        
                    }
                                                      
                }
                                                  
            }
        });     
    }
    function ajaxScanChain(serializedData)
    { 
        $.ajax({
            url: "callbacks/callback_verifysingleorder.php",
            type: 'post',
            timeout: 15000,
            dataType: 'json',
            data: serializedData,
            beforeSend:function(){
         
            },
            complete:function(){
      
            },   
            error:function(jqXHR, textStatus, errorThrown){
                var res = textStatus;
                if(jqXHR.responseText !== "")
                {
                    res = jqXHR.responseText;
                }
                var n = noty({
                    text: res,
                    type: 'error'
                });
                            
            },                              
            success: function(response, textStatus, jqXHR) {
                var textresponse = "Payment recieved...";
                if(!response)
                { 
                    return;
                }
                if(response.error)
                {
                   var n = noty({
                        text: response.error,
                        type: 'error'
                    });                    
                }
                else 
                {
                    if(response.length > 0)
                    {       
                        $("#paymentStatusTable tbody").empty(); 
                    }
                  
                    var totalAmountReceived = 0;
                 
                    var complete = false;
                    var processing = false;
                    for (var i=0;i<response.length;i++)
                    {
                        processing = true;
                        if(response[i].status === "complete" || response[i].status === "overpaid")
                        {
                            complete = true;
                            processing = false;
                        }    
                   
                        totalAmountReceived += parseFloat(parseFloat(response[i].amount));

                        
                        $("#paymentStatusTable").find('tbody')
                        .append($('<tr>')
                            .append($('<td>')
                                .text((i+1))
                            )    
                            .append($('<td>')
                                .append($('<a>')
                                    .attr('class', 'trxLink')
                                    .attr('href', 'bts:Trx/' + response[i].trx_id)
                                    .text(response[i].trx_id.substr(0,10) + "...")
                                )
                            )
                             .append($('<td>')
                                .attr('class', 'text-right')
                                .text(parseFloat(response[i].amount).toFixed(2) + " " + response[i].asset)
                            )                                                                                             
                        );
                    }
                   $('a.trxLink').click(function(e) {
                        if (e.preventDefault) { e.preventDefault(); } else { e.returnValue = false; }
                        window.location.href = $(this).attr("href");
                    });      
                    if(totalAmountReceived > 0)
                    {
                        globalAmountReceived = totalAmountReceived;

                    }                  
                    if(complete)
                    {
                        btsPaymentComplete(); 
                        clearInterval(globalPaymentTimer);
                        btsUpdateUIFullPayment();  
                    }
                    else if(processing)
                    {
                        btsUpdateUIPartialPayment();
                    }                  
                }                                  
            }
        });
 
    }
    function GetURLParameter(sParam)
    {
        var sPageURL = window.location.search.substring(1);
        var sURLVariables = sPageURL.split('&');
        for (var i = 0; i < sURLVariables.length; i++) 
        {
            var sParameterName = sURLVariables[i].split('=');
            if (sParameterName[0] === sParam) 
            {
                return sParameterName[1];
            }
        }
    }
    function btsStartTicker(primaryAssets, secondaryAssets)
    {
      $('.bitsharesticker').bitsharesticker({
          title : 'Bitshares Checkout Live Ticker',
          source: 'callbacks/callback_getfeedprices.php',
          currencyPrimary: primaryAssets,
          currencySecondary: secondaryAssets
      });
    
    }
    function btsStartPaymentTracker(serializedData)
    {
        if(globalScanInProgress)
        {
            return;
        }    
        btsUpdateUIScan();      
        if(globalPaymentTimer)
            clearInterval(globalPaymentTimer);
        ajaxScanChain(serializedData);    
        globalPaymentTimer = setInterval(function() {
            ajaxScanChain(serializedData);  
        }, 10000); 
    }    
    $( document ).ready(function() {      
        var accountName = GetURLParameter('accountName');
        var order_id = GetURLParameter('order_id');
        var memo= GetURLParameter('memo');
        $('#accountName').val(accountName);
        $('#accountNameDisplay').text(accountName);
        $('#order_id').val(order_id);
        $('#memo').val(memo);
        $('#payTo').val(accountName);
        var subject = "Bitshares payment URL for order "+memo;
        var url = encodeURIComponent(window.location.href);
        $('#socialMail').attr('href', "mailto:?subject="+subject+"&body="+url);
        $('#socialGoogle').attr('href', "https://plus.google.com/share?url="+url );
        $('#socialFacebook').attr('href', "http://www.facebook.com/sharer.php?m2w&s=100&p[url]="+url+"&p[images][0]=http://bitshares.org/wp-content/uploads/2014/11/bts-logo-white.png&p[title]=Bitshares payment gateway&p[summary]="+subject);
        $('#socialTwitter').attr('href', "http://twitter.com/intent/tweet?source=sharethiscom&text="+subject+"&url="+url );
        ajaxLookup($('#btsForm').serialize());
       
    }); 
    function btsShowSuccess()
    {
        globalRedirectDialog.open();  
        var countdown = 10;
        if(globalRedirectCountdownTimer)
        {
            clearInterval(globalRedirectCountdownTimer);
        }    
        globalRedirectCountdownTimer = setInterval(function() {
            countdown--;
            
            $('#redirectCountdown').html("You will now be automatically redirected back to the merchant site within " + countdown + " seconds...<br /><br />");
            if(countdown <= 0)
            { 
                clearInterval(globalRedirectCountdownTimer);       
                ajaxSuccess("callbacks/callback_success.php", $('#btsForm').serialize());
            }
            
        }, 1000); 
    }  
    function btsStartPaymentCountdown(countDownTime)
    {
       $('.paymentCountdown').FlipClock(countDownTime, {
		    clockFace: 'MinuteCounter',
		    countdown: true,
            callbacks: {
		        	stop: function() {
		        	    if(!globalPaid)
		        	    {
		        		    btsCancelPaymentByCountdown();
		        		}
		        	}
		        }		    
	    });
    } 
    function btsPaymentComplete()
    {
        globalPaid = true;
        $('.paymentCountdown').stop();
        btsShowSuccess();
    }
   
    function btsExportPaymentTableToCSV() {
        window.location.href = '../exportCSV.php?memo='+$('#memo').val()+'&order_id='+$('#order_id').val();
    }    
    function btsShowPaymentStatus()
    {
        $('#exportCSV').removeClass('invisible');
        $('#paymentStatus').removeClass('hidden');
        btsStartPaymentTracker($('#btsForm').serialize()); 
    }
    
    function btsUpdateOnChange()
    {
        if(globalScanInProgress)
        {
            BootstrapDialog.warning('You have cancelled the current payment scan!');        
        }
        btsUpdateUIScanClear();    
    }    
    function btsCancelPaymentByCountdown()
    {
        var n = noty({
            text: 'This order has expired!',
            type: 'error'
        }); 
        ajaxCancel("callbacks/callback_cancel.php", $('#btsForm').serialize()); 
    }
    function btsPayClick() {
                
        if(globalPaid)
        {
            BootstrapDialog.danger('This order has already been paid for!');
        }
        else if(globalAmountReceived > 0)
        { 
     
            BootstrapDialog.confirm('There are partial payment(s) on this order. Would you like to pay the remaining balance of ' + $("#paymentBalance").text() + '?', function(result){
                if(result) {
                    ajaxPay($('#btsForm').serialize());
                }
            });         
        }                  
        else
        {
            ajaxPay($('#btsForm').serialize());
        }    

    }  
    $("input[type='text'], input[type='number']" ).change(function(e) {
      btsUpdateOnChange();
    });  
    $('.paymentCountdown').click(function (e) {
       BootstrapDialog.warning('This is a time sensitive order. The price at which you pay for this order is locked for up to 15 minutes. You must pay and confirm this order within that time or it will be cancelled and you will be redirected back to the merchant site.'); 
    });              
    $('#exportCSV').click(function (e) {
        if (e.preventDefault) { e.preventDefault(); } else { e.returnValue = false; }
        btsExportPaymentTableToCSV();
    });   	
    $('#btsForm').submit(function(e) {
        if (e.preventDefault) { e.preventDefault(); } else { e.returnValue = false; } 
             
        btsPayClick();

    });
    
    $('#paymentStatus').click(function (e) {
        if (e.preventDefault) { e.preventDefault(); } else { e.returnValue = false; }
        btsShowPaymentStatus();
    }); 	   
     
    $('#return').click(function (e) { 
        if (e.preventDefault) { e.preventDefault(); } else { e.returnValue = false; }       
      
        if(globalPaid)
        {
            ajaxSuccess("callbacks/callback_success.php", $('#btsForm').serialize());
        }
        else
        {
            BootstrapDialog.confirm('This will cancel your order. Are you sure?', function(result){
                if(result) {
                    ajaxCancel("callbacks/callback_cancel.php", $('#btsForm').serialize());
                }else {
                    
                }
            });            
        }
          
		
	});
/*
	jQuery Scrolling Price Ticker for Bitshares decentralized exchange asset prices v1.0
	BTS Delegate: dev.sidhujag
	
	==============================================================================
	Basic Usage
	==============================================================================
		jQuery('#bitsharesticker').bitsharesticker({
			username : 'username'
		});
	
	*For additional documentation please reference github http://github.com/sidhujag/bitshares-ticker
*/
(function (jQuery) {
	jQuery.fn.bitsharesticker = function (options) {
        var currencyIsoCodes = null;
		var options = jQuery.extend({},
		jQuery.fn.bitsharesticker.defaults, options);
		var bitsharesticker;
		var feedsList;
		var overflowContainer;
		var appendThreshhold;
		var currentfeed;
		var listWidth;
		var currentRate = options.normalRate;
		var currencyUniqueList = '';
        var currencyMap = buildCurrencyMap();
        var firstLoadUpdateInterval = 5;
        var firstLoad = true;
		return this.each(function () {
			if (options.tickerOnly == false) {
				bitsharesticker = build();
			} else {
				bitsharesticker = jQuery('<div class="bitsharesticker"><div class="bitsharesticker-replace"></div></div>');
			}
			jQuery(this).append(bitsharesticker);
			var text = "Loading... Please wait.";
			feedsList = jQuery('<ul class="bitsharesticker-feeds-list"><li class="bitsharesticker-feed">' + text + '</li></ul>');
			overflowContainer = jQuery('<div class="bitsharesticker-overflow-container"></div>');
			bitsharesticker.find('div.bitsharesticker-username a').attr('href', 'http://bitshares.org').html(options.title);
			overflowContainer.wrapInner(feedsList);
			bitsharesticker.find('div.bitsharesticker-replace').replaceWith(overflowContainer);


			
			overflowContainer.mouseover(function () {
				currentRate = options.hoverRate;
			})
			overflowContainer.mouseout(function () {
				currentRate = options.normalRate;
			});
			feedsList.css('left', overflowContainer.width());
			animationLoop();
			getCurrencyCodes();
		});
        function decimalAdjust(type, value, exp) {
            // If the exp is undefined or zero...
            if (typeof exp === 'undefined' || +exp === 0) {
              return Math[type](value);
            }
            value = +value;
            exp = +exp;
            // If the value is not a number or the exp is not an integer...
            if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
              return NaN;
            }
            // Shift
            value = value.toString().split('e');
            value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
            // Shift back
            value = value.toString().split('e');
            return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
          }

          // Decimal round
          
          function round10(value, exp) {
            return decimalAdjust('round', value, -1*exp);
          }
          		
		function updater(){
            jQuery.ajax({
                url: options.source + '?assets=' + currencyUniqueList,
                type: 'post',
                dataType: 'json',
                timeout: 15000, 
                error:function(jqXHR, textStatus, errorThrown){
                    firstLoad = true;
                    jQuery('.bitsharesticker-feed').html("<span><font color='red'>Error!</font> Could not download price data. Trying again in 5 seconds...</span>");                  
                },
                complete:function(){
                    var timeout = firstLoadUpdateInterval;
                    if(!firstLoad)
                    {
                        timeout = options.updateInterval;
                    }		
		            setTimeout(function(){ updater(); }, timeout*1000);               
                },                                        
                success: function(response, textStatus, jqXHR) {
                    if(response)
                    {
                        var data = formatJSONCurrencyData(response);
                        if(firstLoad){
                            firstLoad = false;
                            var myhtml = buildScrollingText(data);
                            jQuery('.bitsharesticker-feed').html(myhtml);
                        }
                        else{
                            updateScrollingText(data);
                        }

			        }                                             
                }
            }); 
		}
		function animationLoop() {
		    var pos = feedsList.position().left;
		    if(pos < (-1*feedsList.width()))
		    {
		        feedsList.css('left', overflowContainer.width());
		    }
			if (currentRate > 0) {
				feedsList.animate({
					'left': '-=1px'
				},
				currentRate, 'linear', animationLoop);
			} else {
				animationLoop();
			}

		}
	    function buildCurrencyMap()
	    {
	        var tmpMap =  new Array();
	        var currencyMap = new Array();
	        currencyUniqueList = "";
	        var formattedPrimary = options.currencyPrimary.replace(/\s/g, '');
	        var currencyPrimaryArray =  formattedPrimary.split(',');
	        var formattedSecondary = options.currencySecondary.replace(/\s/g, '');
	        var currencySecondaryArray =  options.currencySecondary.split(',');
	        for(var i =0;i<currencyPrimaryArray.length;i++)
	        {
                if(currencyUniqueList.indexOf(currencyPrimaryArray[i]) === -1)
                {
                    currencyUniqueList += currencyPrimaryArray[i] + ',';
                } 	        
	            for(var j =0;j<currencySecondaryArray.length;j++)
	            {
	                if(currencyUniqueList.indexOf(currencySecondaryArray[j]) === -1)
	                {
	                    currencyUniqueList += currencySecondaryArray[j] + ',';
	                } 
	                var currencyString = currencyPrimaryArray[i]+currencySecondaryArray[j];
	                var reverseCurrencyString = currencySecondaryArray[j]+currencyPrimaryArray[i];
	                if(!tmpMap[reverseCurrencyString] && !tmpMap[currencyString])
	                {
	                    tmpMap[currencyString] = 1;
	                    currencyMap.push({ primary : currencyPrimaryArray[i], secondary : currencySecondaryArray[j] }); 
	                }
	            }
	        }
	        if(currencyUniqueList.length > 0)
	        {
	            currencyUniqueList = currencyUniqueList.slice(0,-1);
	        }
	        return currencyMap;
	    }
	    function formatJSONCurrencyData(response)
	    {
	        var data = [];
	        for(var i =0;i<response.length;i++)
	        {
	            var currencyObj = [];
	            if(!response[i].opening_price)
	            {
	                currencyObj.open_price = response[i].median_price;
	            }
	            else{
	                currencyObj.open_price = response[i].opening_price;
	            }
	            currencyObj.median_price = response[i].median_price;
	            data[response[i].asset] = currencyObj;
	        }
	        return data;
	    }
	    function updateScrollingText(data){
	        jQuery.each( currencyMap, function( key, value ) {
              var isoCodeMap = currencyIsoCodes[value.secondary];
              var precision = 2;
              if(isoCodeMap)
              {
                precision = isoCodeMap.decimal_digits;
              }
              var median_price = 0;
              if(value.primary === "BTS")
              {
                median_price = data[value.secondary].median_price;
                precision = currencyIsoCodes[value.primary].decimal_digits;
              }
              else if(value.secondary === "BTS")
              {
                median_price = 1/data[value.primary].median_price;
                precision = currencyIsoCodes[value.secondary].decimal_digits;
              }
              else if(data[value.primary] && data[value.secondary])
              {             
                median_price = data[value.secondary].median_price/data[value.primary].median_price;  
              }                 
             
              var median_priceRounded = round10(median_price, precision);
              
              var medianRounded = round10(parseFloat(jQuery(key + ' #value').text()), precision);
              if(medianRounded != median_priceRounded)
              {
                  var open_price = 0;
                  if(value.primary === "BTS")
                  {
                    open_price = data[value.secondary].open_price;
                  }
                  else if(value.secondary === "BTS")
                  {
                    open_price = 1/data[value.primary].open_price;
                  }
                  else if(data[value.primary] && data[value.secondary])
                  {            
                    open_price = data[value.secondary].open_price/data[value.primary].open_price;
                  }                      
   
                  var difference = median_price - open_price;
                  var pct = round10((difference / open_price)*100, 2);
                  var symbol = "";
                  if(isoCodeMap)
                  {
                    symbol = isoCodeMap.symbol;
                  }
                  var build = value.primary + "/" + value.secondary + '&nsbp;' + symbol + '<b id="value">'+median_priceRounded+'</b>';
                  if(difference > 0)
                  {
                    build += '<b class="up">&nbsp;<b class="change">&nbsp;'+round10(difference, precision)+ '</b><b class="pct">&nbsp;(' + pct + '%)</b>&nbsp;<i class="fa fa-caret-up"></i></b>';
                  }
                  else if(difference < 0)
                  {
                    build += '<b class="down">&nbsp;<b class="change">&nbsp;'+round10(difference, precision)+ '</b><b class="pct">&nbsp;(' + pct + '%)</b>&nbsp;<i class="fa fa-caret-down"></i></b>';
                  }
                  jQuery(key).html(build);
              }
	        });
	    }
	    function getCurrencyCodes()
	    {
            jQuery.ajax({
                url: "Common-Currency.json",
                type: 'post',
                dataType: 'json',
                timeout: 15000, 
                 error:function(jqXHR, textStatus, errorThrown){
                    jQuery('.bitsharesticker-feed').html("<span><font color='red'>Error!</font> Could not download Currency template file. Please refresh your browser to try again...</span>");                  
                },                                      
                success: function(response, textStatus, jqXHR) {
                    if(response)
                    {   
                        currencyIsoCodes = response;
			            setTimeout(function(){ updater(); }, firstLoadUpdateInterval*1000);              
    			    }                                            
                }
            }); 	    
	    }
		function buildScrollingText(data) {
			var build = '';
			var d = new Date();
			build += "<span>"+d.toString() + '&nbsp;&nbsp;';
            jQuery.each( currencyMap, function( key, value ) {
	          var isoCodeMap = currencyIsoCodes[value.secondary];
	          var precision = 2;
	          if(isoCodeMap)
	          {
	            precision = isoCodeMap.decimal_digits;
	          }            
              build += '<span id="'+value.primary+value.secondary+'">';
              var median_price = 0;
              if(value.primary === "BTS")
              {
                median_price = data[value.secondary].median_price;
                precision = currencyIsoCodes[value.primary].decimal_digits;
              }
              else if(value.secondary === "BTS")
              {
                median_price = 1/data[value.primary].median_price;
                precision = currencyIsoCodes[value.secondary].decimal_digits;
              }
              else if(data[value.primary] && data[value.secondary])
              {             
                median_price = data[value.secondary].median_price/data[value.primary].median_price;  
              }  
              var open_price = 0;
              if(value.primary === "BTS")
              {
                open_price = data[value.secondary].open_price;
              }
              else if(value.secondary === "BTS")
              {
                open_price = 1/data[value.primary].open_price;
              }
              else if(data[value.primary] && data[value.secondary])
              {            
                open_price = data[value.secondary].open_price/data[value.primary].open_price;
              }  
              var difference = 0;
              var pct = 0.00;
              if(open_price > 0 && median_price > 0)
              {
                difference = median_price - open_price;
                pct = round10((difference / open_price)*100, 2);
              }
              var symbol = "";
              if(isoCodeMap)
              {
                symbol = isoCodeMap.symbol;
              }
              build += value.primary + "/" + value.secondary + ' ' + symbol + '<b id="value">'+round10(median_price,precision)+'</b>';
              if(difference > 0)
              {
                build += '<b class="up">&nbsp;<b class="change">&nbsp;'+round10(difference,precision)+ '</b><b class="pct">&nbsp;(' + pct + '%)</b>&nbsp;<i class="fa fa-caret-up"></i></b>';
              }
              else if(difference < 0)
              {
                build += '<b class="down">&nbsp;<b class="change">&nbsp;'+round10(difference,precision)+ '</b><b class="pct">&nbsp;(' + pct + '%)</b>&nbsp;<i class="fa fa-caret-down"></i></b>';
              }              
              build += '&nbsp;&nbsp;</span>';
            });			
			build += 'Rates updated every 5 minutes&nbsp;&nbsp;';	
		    build += 'Powered by <a href="http://bitshares.org" target="_blank">Bitshares.org</a>...&nbsp;&nbsp;</span>';
			return jQuery(build);
		}		
		function build() {
			var build = '';
			build += '<div class="bitsharesticker">';
			build += '<div class="bitsharesticker-container">';
			build += '<div class="bitsharesticker-container-left"></div>';
			build += '<div class="bitsharesticker-container-content">';
			build += '<div class="bitsharesticker-username"><a href="#">Bitshares Ticker</a></div>';
			build += '<div class="bitsharesticker-bitshares-link"><a href="http://bitshares.org" target="_blank">Bitshares.org</a></div>';
			build += '<div class="bitsharesticker-feedbox">';
			build += '<div class="bitsharesticker-feedbox-content">';
			build += '<div class="bitsharesticker-replace"></div>';
			build += '</div>';
			build += '</div>';
			build += '</div>';
			build += '<div class="bitsharesticker-container-right"></div>';
			build += '</div>';
			build += '</div>';
			return jQuery(build);
		}
	};
	jQuery.fn.bitsharesticker.defaults = {
		title: '',
		normalRate: 10,
		hoverRate: 100,
		startOffScreen: true,
		tickerOnly: false,
		source: '',
		currencyPrimary: '',
		currencySecondary: '',
		updateInterval: 300

	};
})(jQuery);

    var globalNeedScan = true;
    var globalPaid = false;
    var globalPaymentTimer = null;
    var globalScanInProgress = false;
    var globalRedirectCountdownTimer = null;
    var globalAmountReceived = 0;
    var globalTotal = 0;
    var globalAsset = "";
    
    $.noty.defaults.layout = "topRight";
    $.noty.defaults.theme = "relax";
    $.noty.defaults.timeout = 10000;
    $.noty.defaults.animation.open = "animated flipInX";
    $.noty.defaults.animation.close = "animated flipOutX";
    $.noty.defaults.animation.easing = "swing";
     var globalInitDialog = new BootstrapDialog({
        title: 'Initializing',
        message: 'Please wait a moment while we set things up...',
        autodestroy: false,
        closable: false,                
        buttons: []    
    });   
    var globalLoadingDialog = new BootstrapDialog({
        title: 'Loading',
        message: 'Please wait a moment...',
        autodestroy: false,
        closable: false,                
        buttons: []    
    });
    globalInitDialog.open();
    var globalRedirectDialog = new BootstrapDialog({
        title: 'Payment Complete',
        message: $('<div></div>').load('template/success.html'),
        autodestroy: false,
        closable: false,  
        closeByBackdrop: false,              
        buttons: [
            {         
            label: 'Cancel',
            cssClass: 'btn-primary',
            action: function(dialogItself){
                if(globalRedirectCountdownTimer)
                {
                    clearInterval(globalRedirectCountdownTimer);
                    globalRedirectCountdownTimer = null;
                } 
           
                dialogItself.close();
            }
        }]    
    });                
    



    // states
    function btsUpdateUIDefault()
    {
        $('#myForm .fa-robo').removeClass('success fail');
	    $('#myForm').removeClass('fail animated');
	    $('#paymentMessage').html("Scanning for payments on the blockchain for this order...<br /><br />");  	    
	    $('#return').text("Cancel and return to merchant");    
	    $('#paymentProgressOuter').addClass("active");
        var balance = globalTotal - globalAmountReceived;
        if(balance < 0)
        {
            balance = 0;
        }    	    
        balance = parseFloat(balance).toFixed(2);
        $("#paymentBalance").text(balance + " " + globalAsset);

        var amount = parseFloat(globalAmountReceived).toFixed(2);
        $("#paymentTotalReceived").text(amount+ " "+ globalAsset);

    }
    function btsUpdateUIPaymentFail()
    {
        $('#myForm .fa-robo').removeClass('success').addClass('fail');
	    $('#myForm').addClass('fail');
	        
    }
    function btsUpdateUIScanClear()
    {
        globalAmountReceived = 0;
        globalTotal = 0;
        globalAsset = "";
        btsUpdateUIDefault();
        globalPaid = false;
        
    } 
    
    function btsUpdateUIScanComplete()
    {
        globalNeedScan = false;
        globalScanInProgress = false;
        $('#paymentMessage').text("Scan complete");
        $('#paymentProgressOuter').removeClass("active");

    } 
       
    function btsUpdateUIScan()
    {
        globalScanInProgress = true;
        btsUpdateUIDefault();          
        $('#paymentProgressOuter').addClass("active");
        $('#paymentMessage').html("Scanning for payments on the blockchain for this order...<br /><br />");                   
    }
   
    function btsUpdateUIPayment()
    {
       var amountReceived = parseFloat(globalAmountReceived).toFixed(2);
        var balance = globalTotal - globalAmountReceived;
        if(balance < 0)
            balance = 0;	    
        balance = parseFloat(balance).toFixed(2);
       $("#paymentBalance").text(balance + " " + globalAsset); 
       $("#paymentTotalReceived").text(amountReceived + " " + globalAsset);                         
                       
    }

    function btsUpdateUIPartialPayment()
    {
        btsUpdateUIPayment();
        var paymentmessage = "Payment found. You still have a balance. ";
        if(globalScanInProgress)
        {
            paymentmessage += "Scanning further for any remaining payments...";
        }
        else
        {
            paymentmessage += "Please click 'Scan Again' to keep looking for more payments...";
        }
        
        paymentmessage += "<br /><br />";
        $('#paymentMessage').html(paymentmessage);           
    }    
    function btsUpdateUIFullPayment()
    {
        btsUpdateUIPayment();
        btsUpdateUIScanComplete();
        $('#myForm .fa-robo').removeClass('fail').addClass('success');
	    $('#myForm').removeClass('fail').removeClass('animated');   
        $('#return').text("I'm done! Return to merchant");
  
        $('#returnIcon').removeClass('fail').addClass('success shake');

        $('#paymentMessage').html("Payment complete...<br /><br />");
   
    } 
    function btsUpdateUIReturnError()
    {
        $('#returnIcon').removeClass('success').addClass('fail');   
    }     